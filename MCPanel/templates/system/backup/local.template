{% extends "layouts/master.template" %}
{% block title %}{{ title }} - Backup - {{ destination.FriendlyName }}{% end %}

{% block content %}
    {% import psutil as psutil %}
    {% import time as time %}
    {% import os as os %}
    {% set usage = psutil.disk_usage(destination.Folder) %}

    <div>
        <h3>Local Host: {{ destination.FriendlyName }}</h3>
        <div id="disk_usage_graph" class="col-md-4"></div>
        <div class="col-md-8">
            <h4>Server Backups</h4>
            {% set iterated = False %}{# this is to get around the lack of else with for in tornado #}
            <div class="panel-group" id="backups">
                {% for server_name in sorted(backups) %}
                    {% set iterated = True %}
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" data-parent="backups" href="#collapse-{{ server_name }}">
                                    <strong>{{ server_name }}</strong>
                                </a>
                            </h4>
                        </div>

                        <div id="collapse-{{ server_name }}" class="panel-collapse collapse">
                            <div class="panel-body">
                                <table class="table">
                                    <thead>
                                    <tr>
                                        <th>File</th>
                                        <th>Backup Date</th>
                                        <th>Size</th>
                                        <th style="width: 5px;"></th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                        {% for index, backup in enumerate(backups[server_name]) %}
                                        <tr>
                                            <td>{{ backup['file'] }}</td>
                                            <td>{{ time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(backup['date'])) }} UTC</td>
                                            {% try %}
                                                {% set size = os.path.getsize(backup['file']) %}{# Workaround for quirk with the way it encounters the exception, and how HTML is rendered with it #}
                                                <td>{{ size / 1024 / 1024 }}MB</td>
                                            {% except OSError as e %}
                                                    <td>File is missing or inaccessible: {{ e }}</td>
                                            {% end %}
                                            <td><button title="Delete backup" class="btn btn-danger btn-xs delete-backup-button" server-name="{{ server_name }}" index="{{ index }}"><i class="fa fa-trash-o"></i></button></td>
                                        </tr>
                                        {% end %}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                {% end %}
                {% if not iterated %}
                <p>No backups present on the server.</p>
                {% end %}
            </div>

            <div class="modal fade" id="deleteBackupModal" tabindex="-1" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title text-danger">Delete Backup</h4>
                        </div>
                        <div class="modal-body">
                            <div class="alert alert-block alert-danger" id="deleteBackupModalCriticalError">
                                <h4>Critical Error</h4>
                                <p id="deleteBackupModalErrorMessage"></p>
                            </div>
                            <p>This will remove the backup and optionally (if the option below is checked) remove the backup archive.</p>
                            <form class="form-inline">
                                <label><input type="checkbox" checked="" id="deleteBackupModalDeleteBackup"> Delete Backup File</label>
                            </form>
                            <input type="hidden" id="deleteBackupModalServerName">
                            <input type="hidden" id="deleteBackupModalIndex">
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-default" data-dismiss="modal" type="button">Close</button>
                            <button type="button" id="deleteBackupModalDeleteButton" class="btn btn-danger"><i class="fa fa-refresh" id="deleteBackupModalRefresh"></i> Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <h4>Settings</h4>
            <form class="form-group" method="post">
                <label>ID<input name="id" style="width: 75px;" class="form-control" type="text" disabled="" value="{{ destination.ID }}"></label>
                <label>Friendly Name<input name="friendly_name" type="text" class="form-control" value="{{ destination.FriendlyName }}"></label>
                <label>Folder<input name="folder" type="text" class="form-control" value="{{ destination.Folder }}"></label>
                <label>Backup Limit<input style="width: 150px;" rel="tooltip" title="This is the limit of backups each server can have. Use 0 for unlimited. Admins override this limit." data-placement="bottom" name="backup_limit" type="number" class="form-control" value="{{ destination.Backup_Limit }}"></label>
                <button type="submit" class="btn btn-success"><i class="fa fa-save"></i> Save</button>
            </form>
        </div>
    </div>
{% end %}

{% block scripts %}
{% import psutil as psutil %}
{% set usage = psutil.disk_usage(destination.Folder) %}

<script src="/static/js/highcharts.js"></script>
<script>
    $(function(){

        var backups = $("#backups");

        backups.collapse({
            toggle: true
        });

        $("[rel='tooltip']").tooltip();

        backups.on('click', '.delete-backup-button', function(){
            var server_name = $(this).attr('server-name');
            var index = $(this).attr('index');
            $("#deleteBackupModalServerName").val(server_name);
            $("#deleteBackupModalIndex").val(index);
            $("#deleteBackupModalCriticalError").hide();
            $("#deleteBackupModalDeleteButton").removeAttr('disabled');
            $("#deleteBackupModal").modal('show');
        });

        $("#deleteBackupModalDeleteButton").click(function(){
            var server_name = $("#deleteBackupModalServerName").val();
            var index = $("#deleteBackupModalIndex").val();
            $("#deleteBackupModalDeleteButton").attr('disabled', '');
            $("#deleteBackupModalRefresh").addClass('fa-spin');
            $.post('{{ reverse_url("System_Backup_Ajax_DeleteBackup", destination_id) }}', {"destination": "local", "remove_file": $("#deleteBackupModalDeleteBackup").prop('checked'), "server_name": server_name, "index": index}).done(function(data){
                $("#deleteBackupModalDeleteButton").removeAttr('disabled');
                $("#deleteBackupModalRefresh").removeClass('fa-spin');
                location.reload(true)
            }).fail(function(data){
                $("#deleteBackupModalCriticalError").fadeIn();
                $("#deleteBackupModalRefresh").removeClass('fa-spin');
                if(!data['responseJSON']['result']['success']){
                    $("#deleteBackupModalErrorMessage").text(data['responseJSON']['result']['message'])
                } else {
                    $("#deleteBackupModalErrorMessage").text("Unknown error occurred.");
                }
            })
        });

        var disk_usage = {
            'Used': {{ round(float(usage.used) / 1000 / 1000 / 1000, 2) }},
            'Free': {{ round(float(usage.free) / 1000 / 1000 / 1000, 2) }}
        };
        $("#disk_usage_graph").highcharts({
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false
            },
            title: {
                text: 'Disk Stats for {{ destination.Folder }}'
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        color: '#000000',
                        connectorColor: '#000000',
                        format: '<b>{point.name}</b>: {point.percentage:.1f} %'
                    }
                }
            },
            tooltip: {
                formatter: function(){
                    return '<b>' + disk_usage[this.point.name] + 'GB</b> ' + this.point.name
                }
            },
            series: [{
                type: 'pie',
                name: 'Disk usage',
                data: [
                    ['Used', {{ usage.percent }}],
                    ['Free', {{ 100 - usage.percent }}]
                ]
            }]
        })
    })
</script>
{% end %}